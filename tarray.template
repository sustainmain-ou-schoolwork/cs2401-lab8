
template <class T>
Tarray<T>::Tarray() {
    capacity = 5;
    used = 0;
    current_index = 0;

    data = new T[capacity];
}

template <class T>
void Tarray<T>::add(T item) {

}

template <class T>
void Tarray<T>::start() {
    current_index = 0;
}

template <class T>
bool Tarray<T>::is_item() const {
    return current_index < used;
}

template <class T>
void Tarray<T>::advance() {
    current_index++;
}

template <class T>
T Tarray<T>::current() const {
    return data[current_index];
}

template <class T>
void Tarray<T>::remove_current() {

}

template <class T>
void Tarray<T>::resize() {
    capacity += 5;

    T* tmp;
    tmp = new T[capacity];

    for (size_t i = 0; i < used; i++) {
        tmp[i] = data[i];
    }

    delete []data;
    data = tmp;
}